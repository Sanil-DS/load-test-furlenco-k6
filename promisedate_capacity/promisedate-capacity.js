// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import "./libs/shim/expect.js";
import "./libs/shim/urijs.js";
import { sleep } from "k6";

export let options = {
  vus: 10,
  duration: '60s',
  ext: {
    loadimpact: {
      projectID: 3630700,
      // Test runs with the same name groups test runs together
      name: "PROMISE DATE & CAPACITY LOAD"
    }
  },
  maxRedirects: 4
};

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  environment: {
    url: "https://st-lms-api.furlenco.com",
    random_cap: "",
    random_cft: "",
    random_floor: "",
    random_capacity_cft: "",
    dateSfd: "",
    addressId: "",
    entityId: ""
  }
});

export default function () {
  postman[Request]({
    name: "promise_dates_calculate",
    id: "6789e82f-0ad9-4866-88fa-d090ca2354f2",
    method: "POST",
    address: "{{url}}/api/v2/promise-dates/calculate",
    data:
      '{\n    "fcLeadTimeInDays": 2,\n    "fulfillmentCenterId": 1,\n    "carrier": "GARUDA",\n    "cartItemGroups": [\n        {\n            "id": 1,\n            "vertical": "FURLENCO_RENTAL",\n            "cartItems": [\n                {\n                    "id": 1,\n                    "logisticsType": "PICKUP",\n                    "spatialRequirementInCft": "{{random_capacity_cft}}",\n                    "temporalDetails": {\n                        "installationTimeInMinutes": 25,\n                        "repairTimeInMinutes": 0,\n                        "uninstallationTimeInMinutes": 25\n                    }\n                }\n            ]\n        }\n    ],\n    "locationDetails": {\n        "accommodationType": "APARTMENT",\n        "floor": 1,\n        "paperworkIsRequired": false,\n        "pincode": 560110,\n        "residenceType": null,\n        "serviceLiftIsAvailable": true\n    }\n}',
    headers: {
      "Content-Type": "application/json",
      Cookie:
        "furlenco_staging_ghost_token=; furlenco_staging_panem_token=U9R2om9dEgokhpHqkeWdZg8X"
    },
    pre() {
      pm.environment.set(
        "random_capacity_cft",
        Math.floor(Math.random() * 10) + 99
      );
    },
    post(response) {
      const daysToAdd = 2;
      const currentDate = new Date();
      const newDate = new Date(
        currentDate.setDate(currentDate.getDate() + daysToAdd)
      );
      const formattedNewDate = newDate.toISOString().slice(0, 10);
      const responseData = pm.response.json();
      const dateInResponse =
        responseData.cartItemGroups[0].items[0].datesAvailableToPromise[0].date;

      pm.test(`Validating promise date (${formattedNewDate})`, () => {
        pm.expect(dateInResponse).to.eql(formattedNewDate);
        pm.response.to.have.status(200);
      });

      pm.environment.set("dateSfd", dateInResponse);
    }
  });

  postman[Request]({
    name: "capacity_commitment",
    id: "bed94fab-b772-44ad-833a-550271e2c872",
    method: "POST",
    address: "{{url}}/api/v1/capacity-commitment",
    data:
      '{\n  "spatialRequirementInCft": "70.28",\n  "temporalRequirementInMinutes": 25,\n  "sharedTemporalRequirementInMinutes": 30,\n  "deliveryCapacityCounter": 1,\n  "pickupCapacityCounter": 1,\n  "entityId": {{entityId}},\n  "pincode": 560110,\n  "fulfillmentCenterId": 1,\n  "vertical": "FURLENCO_RENTAL",\n  "carrier": "GARUDA",\n  "selectedPromiseDate": "{{dateSfd}}",\n  "logisticsType": "DELIVERY",\n  "addressId": {{addressId}},\n  "entityType": "ITEM"\n}',
    headers: {
      accept: "*/*",
      "Content-Type": "application/json"
    },
    pre() {
      pm.environment.set(
        "addressId",
        Math.floor(Math.random() * 90000) + 10000
      );
      function generateRandomNumber() {
        let digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
        let result = 0;
        // Shuffle the array of digits using Fisher-Yates algorithm
        for (let i = digits.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [digits[i], digits[j]] = [digits[j], digits[i]];
        }
        for (let i = 0; i < 10; i++) {
          result += digits[i] * Math.pow(10, 9 - i);
        }
        return result;
      }
      const entityId = generateRandomNumber();
      console.log(entityId);
      pm.environment.set("entityId", entityId);
    },
    post(response) {
      pm.test("Validating Capacity response", function () {
        pm.response.to.have.status(200);
      });
    }
  });
    sleep(0.1)
}
