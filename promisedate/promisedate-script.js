// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import "./libs/shim/urijs.js";
import { sleep } from "k6";

export let options = {
  vus: 2,
  duration: '60s',
  ext: {
    loadimpact: {
      projectID: 3630700,
      // Test runs with the same name groups test runs together
      name: "PROMISE DATE LOAD"
    }
  },
  maxRedirects: 4
};

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  environment: {
    url: "https://st-lms-api.furlenco.com",
    random_cap: "",
    random_cft: "",
    random_floor: ""
  }
});

export default function () {
  postman[Request]({
    name: "calculatePromiseDate Copy",
    id: "3c9497d4-0d4f-416f-a4c8-3beab5469233",
    method: "POST",
    address: "{{url}}/api/v2/promise-dates/calculate",
    data:
      '{\n    "carrier": "GARUDA",\n    "fulfillmentCenterId": 1,\n    "fcLeadTimeInDays": {{random_floor}},\n    "cartItemGroups": [\n        {\n            "id": {{random_floor}},\n            "vertical": "FURLENCO_RENTAL",\n            "cartItems": [\n                {\n                    "id": {{random_floor}},\n                    "logisticsType": "DELIVERY",\n                    "spatialRequirementInCft": "{{random_cft}}",\n                    "temporalDetails": {\n                        "installationTimeInMinutes": 10,\n                        "uninstallationTimeInMinutes": 10\n                    }\n                }\n            ]\n        }\n       \n    ],\n    "locationDetails": {\n        "pincode": 560068,\n        "residenceType": "RENTED",\n        "accommodationType": "APARTMENT",\n        "serviceLiftIsAvailable": true,\n        "floor": {{random_floor}},\n        "paperworkIsRequired": null\n    }\n}',
    headers: {
      "Content-Type": "application/json"
    },
    pre() {
      pm.environment.set("random_cft", Math.floor(Math.random() * 200) + 10);
      pm.environment.set("random_floor", Math.floor(Math.random() * 15) + 2);
    },
    post(response) {
      pm.test("Status code is 200", function () {
        pm.response.to.have.status(200);
      });
      if (pm.response.code != 200)
        console.log(`[${pm.response.code}]  :: ${JSON.stringify(JSON.parse(responseBody))}`);
    }
  });
  sleep(0.1)
}
